

type Service interface {
	GenerateToken(userID int) (string, error)
	ValidToken(token string) (*jwt.Token, error)
}

GenerateToken - is using the SECRET_KEY which is from generated by server.

ValidToken - validating the is HMAC or not.

1. Server generated the key

var SECRET_KEY = []byte("golangstarter_s3cr3T_k3Y") // from auth file.

   router := gin.Default()
   
        cookieStore := cookie.NewStore([]byte(auth.SECRET_KEY))
	router.Use(sessions.Sessions("golangstarter", cookieStore))

2.

   token := jwt.NewWithClaims(jwt.SigningMethodHS256, cliam)

   token.SignedString(SECRET_KEY) // just giving the sever key to get the token.



  func (s *jwtService) GenerateToken(userID int) (string, error) {

	cliam := jwt.MapClaims{} // This allows you to manipulate the claims as a map.
	cliam["user_id"] = userID

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, cliam) // for generate the token

	signedToken, err := token.SignedString(SECRET_KEY) // converting token as  string

	if err != nil {
		return signedToken, err
	}

	return signedToken, nil
}

   
  